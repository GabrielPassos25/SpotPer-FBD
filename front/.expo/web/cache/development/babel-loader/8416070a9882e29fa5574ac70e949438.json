{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNSoundPlayer = NativeModules.RNSoundPlayer;\n\nvar _soundPlayerEmitter = new NativeEventEmitter(RNSoundPlayer);\n\nvar _finishedPlayingListener = null;\nvar _finishedLoadingListener = null;\nexport default {\n  playSoundFile: function playSoundFile(name, type) {\n    RNSoundPlayer.playSoundFile(name, type);\n  },\n  playSoundFileWithDelay: function playSoundFileWithDelay(name, type, delay) {\n    RNSoundPlayer.playSoundFileWithDelay(name, type, delay);\n  },\n  loadSoundFile: function loadSoundFile(name, type) {\n    RNSoundPlayer.loadSoundFile(name, type);\n  },\n  setNumberOfLoops: function setNumberOfLoops(loops) {\n    RNSoundPlayer.setNumberOfLoops(loops);\n  },\n  playUrl: function playUrl(url) {\n    RNSoundPlayer.playUrl(url);\n  },\n  loadUrl: function loadUrl(url) {\n    RNSoundPlayer.loadUrl(url);\n  },\n  onFinishedPlaying: function onFinishedPlaying(callback) {\n    if (_finishedPlayingListener) {\n      _finishedPlayingListener.remove();\n\n      _finishedPlayingListener = undefined;\n    }\n\n    _finishedPlayingListener = _soundPlayerEmitter.addListener('FinishedPlaying', callback);\n  },\n  onFinishedLoading: function onFinishedLoading(callback) {\n    if (_finishedLoadingListener) {\n      _finishedLoadingListener.remove();\n\n      _finishedLoadingListener = undefined;\n    }\n\n    _finishedLoadingListener = _soundPlayerEmitter.addListener('FinishedLoading', callback);\n  },\n  addEventListener: function addEventListener(eventName, callback) {\n    return _soundPlayerEmitter.addListener(eventName, callback);\n  },\n  play: function play() {\n    RNSoundPlayer.resume();\n  },\n  pause: function pause() {\n    RNSoundPlayer.pause();\n  },\n  resume: function resume() {\n    RNSoundPlayer.resume();\n  },\n  stop: function stop() {\n    RNSoundPlayer.stop();\n  },\n  seek: function seek(seconds) {\n    RNSoundPlayer.seek(seconds);\n  },\n  setVolume: function setVolume(volume) {\n    RNSoundPlayer.setVolume(volume);\n  },\n  setSpeaker: function setSpeaker(on) {\n    if (Platform.OS === \"android\") {\n      console.log(\"setSpeaker is not implement on Android\");\n    } else {\n      RNSoundPlayer.setSpeaker(on);\n    }\n  },\n  getInfo: function getInfo() {\n    return _regeneratorRuntime.async(function getInfo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", RNSoundPlayer.getInfo());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  unmount: function unmount() {\n    if (_finishedPlayingListener) {\n      _finishedPlayingListener.remove();\n\n      _finishedPlayingListener = undefined;\n    }\n\n    if (_finishedLoadingListener) {\n      _finishedLoadingListener.remove();\n\n      _finishedLoadingListener = undefined;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/gabriel/Desktop/fbd/SpotPer-FBD/node_modules/react-native-sound-player/index.js"],"names":["RNSoundPlayer","NativeModules","_soundPlayerEmitter","NativeEventEmitter","_finishedPlayingListener","_finishedLoadingListener","playSoundFile","name","type","playSoundFileWithDelay","delay","loadSoundFile","setNumberOfLoops","loops","playUrl","url","loadUrl","onFinishedPlaying","callback","remove","undefined","addListener","onFinishedLoading","addEventListener","eventName","play","resume","pause","stop","seek","seconds","setVolume","volume","setSpeaker","on","Platform","OS","console","log","getInfo","unmount"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n'use strict'\n\nimport { NativeModules, NativeEventEmitter, Platform } from 'react-native'\nconst { RNSoundPlayer } = NativeModules\n\nconst _soundPlayerEmitter = new NativeEventEmitter(RNSoundPlayer)\nlet _finishedPlayingListener = null\nlet _finishedLoadingListener = null\n\nexport default {\n\n  playSoundFile: (name: string, type: string) => {\n    RNSoundPlayer.playSoundFile(name, type)\n  },\n  \n  playSoundFileWithDelay: (name: string, type: string, delay: number) => {\n    RNSoundPlayer.playSoundFileWithDelay(name, type, delay)\n  },\n\n  loadSoundFile: (name: string, type: string) => {\n    RNSoundPlayer.loadSoundFile(name, type)\n  },\n\n  setNumberOfLoops: (loops: number) => {\n    RNSoundPlayer.setNumberOfLoops(loops);\n  },\n\n  playUrl: (url: string) => {\n    RNSoundPlayer.playUrl(url)\n  },\n\n  loadUrl: (url: string) => {\n    RNSoundPlayer.loadUrl(url)\n  },\n\n  onFinishedPlaying: (callback: (success: boolean) => any) => {\n    if (_finishedPlayingListener) {\n      _finishedPlayingListener.remove()\n      _finishedPlayingListener = undefined\n    }\n\n    _finishedPlayingListener = _soundPlayerEmitter.addListener(\n      'FinishedPlaying',\n      callback\n    )\n  },\n\n  onFinishedLoading: (callback: (success: boolean) => any) => {\n    if (_finishedLoadingListener) {\n      _finishedLoadingListener.remove()\n      _finishedLoadingListener = undefined\n    }\n\n    _finishedLoadingListener = _soundPlayerEmitter.addListener(\n      'FinishedLoading',\n      callback\n    )\n  },\n\n  addEventListener: (eventName: 'FinishedLoading' | 'FinishedPlaying' | 'FinishedLoadingURL' | 'FinishedLoadingFile', callback: Function) => _soundPlayerEmitter.addListener(eventName, callback),\n\n  play: () => {\n    // play and resume has the exact same implementation natively\n    RNSoundPlayer.resume()\n  },\n\n  pause: () => {\n    RNSoundPlayer.pause()\n  },\n\n  resume: () => {\n    RNSoundPlayer.resume()\n  },\n\n  stop: () => {\n    RNSoundPlayer.stop()\n  },\n\n  seek: (seconds: number) => {\n    RNSoundPlayer.seek(seconds)\n  },\n\n  setVolume: (volume: number) => {\n    RNSoundPlayer.setVolume(volume)\n  },\n\n  setSpeaker: (on: boolean) => {\n    if(Platform.OS === \"android\"){\n      console.log(\"setSpeaker is not implement on Android\");\n    } else {\n      RNSoundPlayer.setSpeaker(on);\n    }\n  },\n\n  getInfo: async () => RNSoundPlayer.getInfo(),\n\n  unmount: () => {\n    if (_finishedPlayingListener) {\n      _finishedPlayingListener.remove()\n      _finishedPlayingListener = undefined\n    }\n\n    if (_finishedLoadingListener) {\n      _finishedLoadingListener.remove()\n      _finishedLoadingListener = undefined\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}